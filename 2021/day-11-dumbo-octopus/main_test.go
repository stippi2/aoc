package main

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"testing"
)

func Test_parseInput(t *testing.T) {
	m := parseInput(exampleInput[0])
	assert.Equal(t, 10, m.width)
	assert.Equal(t, 10, m.height)
	assert.Equal(t, 5, m.get(0, 0))
	assert.Equal(t, 6, m.get(9, 9))
}

func Test_stepSimple(t *testing.T) {
	m := parseInput("11111\n19991\n19191\n19991\n11111")
	expected := parseInput("34543\n40004\n50005\n40004\n34543")
	flashes, _ := m.step()
	assert.Equal(t, expected, m)
	assert.Equal(t, 9, flashes)
}

func Test_stepLarger(t *testing.T) {
	m := parseInput(exampleInput[0])
	for step := 1; step < len(exampleInput); step++ {
		expected := parseInput(exampleInput[step])
		m.step()
		if !assert.Equal(t, expected, m) {
			fmt.Printf("failed simulation at step %v\n", step)
			fmt.Printf("  expected:\n%s\n\n", parseInput(exampleInput[step]))
			fmt.Printf("  actual:\n%s\n", m)
			break
		}
	}
}

func Test_step100(t *testing.T) {
	m := parseInput(exampleInput[0])
	flashes := 0
	for step := 0; step < 100; step++ {
		flashed, _ := m.step()
		flashes += flashed
	}
	assert.Equal(t, 1656, flashes)
}

func Test_findSynchronize(t *testing.T) {
	m := parseInput(exampleInput[0])
	steps := 0
	for {
		steps++
		_, synchronized := m.step()
		if synchronized {
			break
		}
	}
	assert.Equal(t, 195, steps)
}

var exampleInput = []string{
	`5483143223
2745854711
5264556173
6141336146
6357385478
4167524645
2176841721
6882881134
4846848554
5283751526`,

	`6594254334
3856965822
6375667284
7252447257
7468496589
5278635756
3287952832
7993992245
5957959665
6394862637`,

	`8807476555
5089087054
8597889608
8485769600
8700908800
6600088989
6800005943
0000007456
9000000876
8700006848`,

	`0050900866
8500800575
9900000039
9700000041
9935080063
7712300000
7911250009
2211130000
0421125000
0021119000`,

	`2263031977
0923031697
0032221150
0041111163
0076191174
0053411122
0042361120
5532241122
1532247211
1132230211`,

	`4484144000
2044144000
2253333493
1152333274
1187303285
1164633233
1153472231
6643352233
2643358322
2243341322`,

	`5595255111
3155255222
3364444605
2263444496
2298414396
2275744344
2264583342
7754463344
3754469433
3354452433`,

	`6707366222
4377366333
4475555827
3496655709
3500625609
3509955566
3486694453
8865585555
4865580644
4465574644`,

	`7818477333
5488477444
5697666949
4608766830
4734946730
4740097688
6900007564
0000009666
8000004755
6800007755`,

	`9060000644
7800000976
6900000080
5840000082
5858000093
6962400000
8021250009
2221130009
9111128097
7911119976`,

	`0481112976
0031112009
0041112504
0081111406
0099111306
0093511233
0442361130
5532252350
0532250600
0032240000`,
}
